Design document answer following questions:

1) How many threads are you going to use?
	Specify the work each thread is intended to perform.

-> One main thread: parse input file, create threads, start timer.
	thread is idle during simulation, it just performs setup/cleanup.

-> One controller thread: Global scheduler, it will decide which train will
	enter the main track and signals it to enter. It will wait for the
	train to cross before allowing the next one.

-> n train threads: One thread per train, each simulates a single train.
	It will load (sleep during load), add to station queue, cross (sleep),
	and then finish and signal controller that it is done.
	Then terminate.

-> Therefore a total of (2+n) threads. 


2) Do the threads work independently? Or, is there a "controller" thread?
	
->	1 controller thread to manage the main track sending and waiting.
	Train threads will do their own work (loading, queueing, waiting)
	But the controller thread will decide when they cross. It will
	maintain the priority rules and signals exactly one train at a time.


3) How many mutexes are you going to use?
	Specify the operation that each mutex will guard.

	Number of mutexs: 7

->	1 start mutex - It will to coordinate when all threads should begin.
		The train threads will wait for it to begin loading.

	4 Station mutex - mutex will protect station queues
		There will be four queues for each type of priority
		i.e high & low, east & west.
		Therefore, each queue must get its own mutex.
		It will be used by train threads to add themselves to queue
		It will be used by controller to check and remove from queue.


	1 Main track mutex - protects access to the main track state.
		Used to indicate to the controller when it can or cannot 
		send a train.	
		Used by controller to check if track is free.
		Used by train thread when signaling it is done crossing.

	1 Train cross id mutex - protects the variable that records
		train id for which train will cross next.
		Used by controller to set the variable,
		Used by train threads to check if they are picked to
		cross next.


4) Will the main thread be idle? if not, what will it be doing?
	
	The main thread will be idle. It will perform setup and cleanup.
	While the train simulation is running it will be standing by idle.


5) How are you going to represent stations (loaded trains ready to depart)?
	What type of data structure will you use?

	Stations will be a queue of Train structs.
	The train structs will store id, priority, direction, 
		load/cross time.
	

6) How are you going to ensure that data structures in your program
	will not be modified concurrently?

	The station mutexs protecting each queue will ensure that the data
	will not be modified concurrently. The train structs stored inside,
	will never be modified so they do not need a mutex.

	Main track state is protected by a mutex.


7) How many convars are you going ot use? For each convar:
	~ Describe the condition it will represent.
	~ Which mutex is associated with the convar? why?
	~ What operation should be performed one pthread_cond_wait() has be unblocked
		and re-acquired the mutex?

	Total convars: 6	

	Start convar: 
		- All train threads but wait until signalled that setup
		is completed, and timer has started.
		- Associated with start mutex, it protects the start flag
		that indicates when simulation has begun.
		- After pthread_cond_wait() unblocks and reacquired start
		mutex, checks that flag is set, unlocks mutex and begins loading phase.

	queue ready convars (4 of them):
		- Represents when at least one train is finished loading and 
		is waiting in station queue.
		- Associated with station mutex, protects access to queue
		so only one thread can modify or look at the queue at a time.
		- checks queue to confirm not empty, removes next train,
		and unlcoks the mutex before signaling train to cross.

	track busy convar: 
		- Represents if the main track is free or not. i.e.
		train has finsihed crossing and signaled completion.
		- Associated with track mutex, protects track in use
		variable to ensure only one train is on the track at 
		a time.
		- checks track is marked free, updates state to occupied for next
		train, then unlocks before signaling that train to cross. 

	train to cross convar:
		- Represents if this train is allowed to run
		- Associated with the train to cross id mutex
		- Recheck the train id condition, once safe to proceed unlock mutex,
		 and begin crossing.


8) Briefly sketch the overall algorithm you will use. Use sentences.

	Main thread:
	Parse input file and create all mutexs, convars, and queues.
	Create controller and train threads
	Once all threads ready, singla start condition.
	wait for threads to complete then terminate.

	Train thread:
	Wait for start signal from main thread to begin loading.
	Lock queue mutex, add train to queue, then unlock mutex.
	signal controller that queue has a ready train.
	wait until controller signals to cross.
	after crossing, signla contorller that crossing is complete, exit.


	Controller thread:
	Wait on queue ready convars until atleast one train is ready.
	Lock queue mutex and select next train ot cross.
	Signal trains with track busy convar to tell trains it is free.
	waits until train finsihed crossing and marks track free.
	repeat until all trains are done. 
